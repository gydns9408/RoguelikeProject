//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions/SystemSettingInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SystemSettingInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SystemSettingInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SystemSettingInputActions"",
    ""maps"": [
        {
            ""name"": ""System"",
            ""id"": ""56acf4a5-efe0-4538-87e4-de62e75c4973"",
            ""actions"": [
                {
                    ""name"": ""MonsterHpBarVisible"",
                    ""type"": ""Button"",
                    ""id"": ""71507f6a-e287-455d-bc9f-184fa0024b54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerInfoUIVisible"",
                    ""type"": ""Button"",
                    ""id"": ""51ff2444-e667-4e55-a252-fabe4d0971c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bfb13dab-10e0-4f9d-97f6-6aa33bc82523"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""MonsterHpBarVisible"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4aef658-a8c5-426e-a0a5-29d3ef2e4a18"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""PlayerInfoUIVisible"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoardAndMouse"",
            ""bindingGroup"": ""KeyBoardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // System
        m_System = asset.FindActionMap("System", throwIfNotFound: true);
        m_System_MonsterHpBarVisible = m_System.FindAction("MonsterHpBarVisible", throwIfNotFound: true);
        m_System_PlayerInfoUIVisible = m_System.FindAction("PlayerInfoUIVisible", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // System
    private readonly InputActionMap m_System;
    private ISystemActions m_SystemActionsCallbackInterface;
    private readonly InputAction m_System_MonsterHpBarVisible;
    private readonly InputAction m_System_PlayerInfoUIVisible;
    public struct SystemActions
    {
        private @SystemSettingInputActions m_Wrapper;
        public SystemActions(@SystemSettingInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MonsterHpBarVisible => m_Wrapper.m_System_MonsterHpBarVisible;
        public InputAction @PlayerInfoUIVisible => m_Wrapper.m_System_PlayerInfoUIVisible;
        public InputActionMap Get() { return m_Wrapper.m_System; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SystemActions set) { return set.Get(); }
        public void SetCallbacks(ISystemActions instance)
        {
            if (m_Wrapper.m_SystemActionsCallbackInterface != null)
            {
                @MonsterHpBarVisible.started -= m_Wrapper.m_SystemActionsCallbackInterface.OnMonsterHpBarVisible;
                @MonsterHpBarVisible.performed -= m_Wrapper.m_SystemActionsCallbackInterface.OnMonsterHpBarVisible;
                @MonsterHpBarVisible.canceled -= m_Wrapper.m_SystemActionsCallbackInterface.OnMonsterHpBarVisible;
                @PlayerInfoUIVisible.started -= m_Wrapper.m_SystemActionsCallbackInterface.OnPlayerInfoUIVisible;
                @PlayerInfoUIVisible.performed -= m_Wrapper.m_SystemActionsCallbackInterface.OnPlayerInfoUIVisible;
                @PlayerInfoUIVisible.canceled -= m_Wrapper.m_SystemActionsCallbackInterface.OnPlayerInfoUIVisible;
            }
            m_Wrapper.m_SystemActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MonsterHpBarVisible.started += instance.OnMonsterHpBarVisible;
                @MonsterHpBarVisible.performed += instance.OnMonsterHpBarVisible;
                @MonsterHpBarVisible.canceled += instance.OnMonsterHpBarVisible;
                @PlayerInfoUIVisible.started += instance.OnPlayerInfoUIVisible;
                @PlayerInfoUIVisible.performed += instance.OnPlayerInfoUIVisible;
                @PlayerInfoUIVisible.canceled += instance.OnPlayerInfoUIVisible;
            }
        }
    }
    public SystemActions @System => new SystemActions(this);
    private int m_KeyBoardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyBoardAndMouseScheme
    {
        get
        {
            if (m_KeyBoardAndMouseSchemeIndex == -1) m_KeyBoardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoardAndMouse");
            return asset.controlSchemes[m_KeyBoardAndMouseSchemeIndex];
        }
    }
    public interface ISystemActions
    {
        void OnMonsterHpBarVisible(InputAction.CallbackContext context);
        void OnPlayerInfoUIVisible(InputAction.CallbackContext context);
    }
}
